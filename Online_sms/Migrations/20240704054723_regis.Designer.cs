// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Online_sms.Models;

#nullable disable

namespace Online_sms.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20240704054723_regis")]
    partial class regis
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Online_sms.Models.ChatLimit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ChatCount")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("ChatLimits");
                });

            modelBuilder.Entity("Online_sms.Models.Friend", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("FriendUserUser_id")
                        .HasColumnType("int");

                    b.Property<int>("Friend_Id")
                        .HasColumnType("int");

                    b.Property<int>("User_Id")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FriendUserUser_id");

                    b.HasIndex("User_Id");

                    b.ToTable("Friends");
                });

            modelBuilder.Entity("Online_sms.Models.Room", b =>
                {
                    b.Property<int>("Room_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Room_Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.HasKey("Room_Id");

                    b.ToTable("Rooms");
                });

            modelBuilder.Entity("Online_sms.Models.RoomMessage", b =>
                {
                    b.Property<int>("Message_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Message_Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("Message")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Room_Id")
                        .HasColumnType("int");

                    b.Property<int>("User_Id")
                        .HasColumnType("int");

                    b.HasKey("Message_Id");

                    b.HasIndex("Room_Id");

                    b.HasIndex("User_Id");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("Online_sms.Models.User", b =>
                {
                    b.Property<int>("User_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("User_id"));

                    b.Property<string>("ConfirmationCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsEmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone_Number")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("User_name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("User_id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            User_id = 1,
                            CreatedAt = new DateTime(2024, 7, 4, 5, 47, 21, 585, DateTimeKind.Utc).AddTicks(7240),
                            Email = "LandenPhD@gmail.com",
                            IsEmailConfirmed = false,
                            Password = "$2a$12$p6SajsJcQBaDyh2eMg54huGoVjNJxUaiCcDa81dWifXKnAlBbZoVa",
                            Phone_Number = "220.163.1527 x2132",
                            User_name = "Eleanora Kunze"
                        },
                        new
                        {
                            User_id = 2,
                            CreatedAt = new DateTime(2024, 7, 4, 5, 47, 21, 585, DateTimeKind.Utc).AddTicks(9598),
                            Email = "JustonI@gmail.com",
                            IsEmailConfirmed = false,
                            Password = "$2a$12$p6SajsJcQBaDyh2eMg54huGoVjNJxUaiCcDa81dWifXKnAlBbZoVa",
                            Phone_Number = "243-338-9771",
                            User_name = "Kristoffer Gleichner"
                        },
                        new
                        {
                            User_id = 3,
                            CreatedAt = new DateTime(2024, 7, 4, 5, 47, 21, 586, DateTimeKind.Utc).AddTicks(2482),
                            Email = "MarleyV@gmail.com",
                            IsEmailConfirmed = false,
                            Password = "$2a$12$p6SajsJcQBaDyh2eMg54huGoVjNJxUaiCcDa81dWifXKnAlBbZoVa",
                            Phone_Number = "020.746.8050 x374",
                            User_name = "Candace Mertz PhD"
                        },
                        new
                        {
                            User_id = 4,
                            CreatedAt = new DateTime(2024, 7, 4, 5, 47, 21, 586, DateTimeKind.Utc).AddTicks(4552),
                            Email = "MarinaDDS@gmail.com",
                            IsEmailConfirmed = false,
                            Password = "$2a$12$p6SajsJcQBaDyh2eMg54huGoVjNJxUaiCcDa81dWifXKnAlBbZoVa",
                            Phone_Number = "496.135.9707 x25931",
                            User_name = "Mrs. Adeline Nova Robel PhD"
                        },
                        new
                        {
                            User_id = 5,
                            CreatedAt = new DateTime(2024, 7, 4, 5, 47, 21, 586, DateTimeKind.Utc).AddTicks(9174),
                            Email = "MarjoryII@gmail.com",
                            IsEmailConfirmed = false,
                            Password = "$2a$12$p6SajsJcQBaDyh2eMg54huGoVjNJxUaiCcDa81dWifXKnAlBbZoVa",
                            Phone_Number = "400.828.0990 x069",
                            User_name = "Genesis Koepp"
                        });
                });

            modelBuilder.Entity("Online_sms.Models.ChatLimit", b =>
                {
                    b.HasOne("Online_sms.Models.User", "User")
                        .WithOne("ChatLimit")
                        .HasForeignKey("Online_sms.Models.ChatLimit", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Online_sms.Models.Friend", b =>
                {
                    b.HasOne("Online_sms.Models.User", "FriendUser")
                        .WithMany()
                        .HasForeignKey("FriendUserUser_id");

                    b.HasOne("Online_sms.Models.User", "User")
                        .WithMany("Friends")
                        .HasForeignKey("User_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FriendUser");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Online_sms.Models.RoomMessage", b =>
                {
                    b.HasOne("Online_sms.Models.Room", "ChatRoom")
                        .WithMany("Messages")
                        .HasForeignKey("Room_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Online_sms.Models.User", "User")
                        .WithMany("Messages")
                        .HasForeignKey("User_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ChatRoom");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Online_sms.Models.Room", b =>
                {
                    b.Navigation("Messages");
                });

            modelBuilder.Entity("Online_sms.Models.User", b =>
                {
                    b.Navigation("ChatLimit")
                        .IsRequired();

                    b.Navigation("Friends");

                    b.Navigation("Messages");
                });
#pragma warning restore 612, 618
        }
    }
}
